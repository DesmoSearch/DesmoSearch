//https://github.com/MathEnthusiast314/DesTree
//authorplusurl looks like [{"author": "","url": ""},...]
objowner={}
authorplusurl.forEach(function(i){
objowner[i.url.substring(34)]=i.author
})
const copyRef = copy;
GraphsList2 = authorplusurl.map(i=>i.url.substring(34));
var len = GraphsList2.length;
GraphsList = [];
ParentGraphsList = [];
var thetitles = {};
var thedates = {};

async function desmopast(hash0) {
    let cur = hash0;
    var setdate = '';
    while (true) {

        try {
            json = await (
                await fetch(`https://www.desmos.com/calculator/${cur}`, {
                    headers: {
                        Accept: "application/json",
                    },
                })
            ).json()
        } catch (err) {}
        if (json) {
            setdate = json.created;
        }
        if (!json) {
            printlog();
            json = {};
            json.title = "Desmos | Graphing Calculator"
        }

        if (json.created) {
            setdate = json.created;
        };
        thetitles[cur] = json.title;
        thedates[cur] = setdate;
        if (!GraphsList.includes(cur)) {
            GraphsList.push(cur);
            if (!json.parent_hash) {
                ParentGraphsList.push(null);
            } else {
                ParentGraphsList.push(json.parent_hash)
            };
        }
        if (!json.parent_hash||GraphsList.includes(json.parent_hash)) {
            break
        };
        cur = json.parent_hash;
    }
}

console.log('Please wait');
var saveprogressindex = 0;
const batches = 20;
for (let index = 0; index < batches; index++) {
    const promises = GraphsList2.slice(index * Math.ceil(len / batches), Math.ceil(len / batches) * (index + 1)).map(desmopast);
    await Promise.all(promises);
    saveprogressindex = index;
    printlog();
}
console.log('Step 1 of 3 ✅\nHashes loaded!');

function printlog() {
    console.clear();
    console.log("Please wait");
    index2 = saveprogressindex + 1
    console.log('[' + (index2) + '/' + batches + '] ' + new Array(batches.toString().length - index2.toString().length + 1).join(' ') + (new Array(index2 + 1).join('█') + new Array(batches - (index2) + 1).join('▒')));
}
